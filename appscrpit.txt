/**
 * ===================================================================================
 * BOT-READY FETCH-ONLY SCRIPT (GET-only, Robust)
 * ===================================================================================
 * Handles truck lookups and row fetches via GET requests.
 * Compatible with your Node.js WhatsApp bot.
 */

function doGet(e) {
  try {
    const action = e.parameter.action;
    const sheetName = e.parameter.sheet;
    const query = e.parameter.query;

    let result;
    if (action === 'getTruckStatus' && sheetName && query) {
      result = handleFindTruck(sheetName, query);
    } else if (action === 'getRowDetails' && sheetName && query) {
      const rowNumber = parseInt(query, 10);
      if (isNaN(rowNumber)) {
        result = { success: false, message: "Invalid row number provided." };
      } else {
        result = handleGetRow(sheetName, rowNumber);
      }
    } else if (action === 'truckQuery') {
      result = handleTruckQuery(JSON.parse(query));
    } else {
      result = { success: false, message: "Invalid action or missing parameters." };
    }

    return ContentService.createTextOutput(JSON.stringify(result))
                         .setMimeType(ContentService.MimeType.JSON);

  } catch (err) {
    const errorResult = { success: false, message: `Script error: ${err.message}` };
    return ContentService.createTextOutput(JSON.stringify(errorResult))
                         .setMimeType(ContentService.MimeType.JSON);
  }
}

function handleTruckQuery(query) {
  var sheet;
  var headers;
  
  // Default to TRANSIT sheet, but allow for SCT
  if (query.sheet && query.sheet.toUpperCase() === 'SCT') {
    sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('SCT');
  } else {
    sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('TRANSIT');
  }
  
  var data = sheet.getDataRange().getValues();
  headers = data.shift();
  
  var results = data.filter(function(row) {
    var match = true;
    
    // If dateRange is specified, filter by date (e.g. today, yesterday, etc.)
    if (query.dateRange) {
      var loadingDateCol = headers.indexOf('LOADING DATE');
      var loadingDate = new Date(row[loadingDateCol]);
      var today = new Date();
      var yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      
      if (query.dateRange === 'today' && loadingDate.setHours(0,0,0,0) !== today.setHours(0,0,0,0)) {
        match = false;
      }
      
      if (query.dateRange === 'yesterday' && loadingDate.setHours(0,0,0,0) !== yesterday.setHours(0,0,0,0)) {
        match = false;
      }

      if (query.dateRange === 'yesterday and today') {
        var todayMatch = loadingDate.setHours(0,0,0,0) === today.setHours(0,0,0,0);
        var yesterdayMatch = loadingDate.setHours(0,0,0,0) === yesterday.setHours(0,0,0,0);
        if (!todayMatch && !yesterdayMatch) {
            match = false;
        }
      }
    }

    // --- PATCH: Partial, case-insensitive consignor match ---
    if (query.consignor) {
      var consignorCol = headers.indexOf('CONSIGNOR');
      var cell = (row[consignorCol] || '').toString().toLowerCase();
      var search = query.consignor.toString().toLowerCase();
      if (cell.indexOf(search) === -1) {
        match = false;
      }
    }
    // --- PATCH: Partial, case-insensitive truckId match ---
    if (query.truckId) {
      var truckNoCol = headers.indexOf('TRUCK No.');
      var cell = (row[truckNoCol] || '').toString().toLowerCase();
      var search = query.truckId.toString().toLowerCase();
      if (cell.indexOf(search) === -1) {
        match = false;
      }
    }
    if (query.status === 'left') {
      var gateOutCol = headers.indexOf('GATE OUT');
      if (!row[gateOutCol]) {
        match = false;
      }
    }
    return match;
  });

  // --- PATCH: Limit results if query.limit is set ---
  var limitedResults = results;
  if (query.limit && !isNaN(query.limit)) {
    limitedResults = results.slice(0, Number(query.limit));
  }

  // --- PATCH: Always return data array for bot filtering ---
  if (query.column) {
    var colIndex = headers.indexOf(query.column);
    var values = limitedResults.map(function(row) {
      return row[colIndex];
    });
    return { success: true, message: 'Values for ' + query.column + ':\n' + values.join('\n'), data: values };
  }

  // Convert rows to objects with headers
  var dataObjs = limitedResults.map(function(row, idx) {
    var obj = { ROW_NUMBER: idx + 2 }; // +2 because headers removed and 1-based
    for (var i = 0; i < headers.length; i++) {
      obj[headers[i]] = row[i];
    }
    return obj;
  });

  return { 
    success: true, 
    message: 'Found ' + results.length + ' trucks.', 
    data: dataObjs 
  };
}


function handleGetRow(sheetName, rowNumber) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  if (!sheet) {
    return { success: false, message: `Sheet '${sheetName}' not found.` };
  }

  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  if (rowNumber <= 1 || rowNumber > sheet.getLastRow()) {
    return { success: false, message: `Row ${rowNumber} is out of bounds.` };
  }

  const rowData = sheet.getRange(rowNumber, 1, 1, headers.length).getValues()[0];
  if (!rowData || rowData.every(v => v === "")) {
    return { success: false, message: `Row ${rowNumber} is empty or contains no data.` };
  }

  const result = { ROW_NUMBER: rowNumber };
  for (let i = 0; i < headers.length; i++) {
    result[headers[i]] = rowData[i];
  }

  return { success: true, message: `Data for row ${rowNumber} retrieved.`, data: [result] };
}

function handleFindTruck(sheetName, truckNo) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  if (!sheet) {
    return { success: false, message: `Sheet '${sheetName}' not found.` };
  }

  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const rows = sheet.getDataRange().getValues();
  const truckColIndex = headers.findIndex(h => h.toLowerCase().includes('truck'));

  if (truckColIndex === -1) {
    return { success: false, message: "Could not find a 'Truck' column in the sheet." };
  }

  const search = truckNo.toLowerCase();
  const matches = [];

  for (let i = 1; i < rows.length; i++) {
    const val = (rows[i][truckColIndex] || '').toString().toLowerCase();
    if (val.includes(search)) {
      const rowObj = { ROW_NUMBER: i + 1 };
      for (let j = 0; j < headers.length; j++) {
        rowObj[headers[j]] = rows[i][j];
      }
      matches.push(rowObj);
    }
  }

  if (matches.length === 0) {
    return { success: false, message: `No truck found matching '${truckNo}'.` };
  }

  return { success: true, message: `Found ${matches.length} match(es) for '${truckNo}'.`, data: matches };
}